#!groovy
properties([disableConcurrentBuilds()])

pipeline {
    agent any
    triggers {
        pollSCM('H/5 * * * *')
    }
    options {
        skipStagesAfterUnstable()
        timestamps()
    }
    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_HUB_REPO = 'daniyarirkagaliev' 
        DOCKER_IMAGE = 'my-app'
        DOCKER_CREDS = credentials('docker-hub-creds')
        DOCKERFILE_PATH = 'docker/Dockerfile'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Cache Dependencies') {
            steps {
                script {
                    def cacheKey = "node-modules-${env.NODE_VERSION}-${sh(script: 'sha1sum package-lock.json | cut -d " " -f1', returnStdout: true).trim()}"

                    if (fileExists('node_modules')) {
                        echo 'Using cached node_modules'
                    } else {
                        sh 'npm install'
                    }
                }
            }
        }
        stage('Linting') {
            steps {
                sh 'npm run lint'
            }
        }
        stage('Tests') {
            steps {
                sh 'npm test'
            }
        }
        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    if (!fileExists(env.DOCKERFILE_PATH)) {
                        error("Dockerfile not found at path: ${env.DOCKERFILE_PATH}")
                    }
                    
                    docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDS}") {
                        def customImage = docker.build(
                            "${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:${env.BUILD_NUMBER}",
                            "-f ${env.DOCKERFILE_PATH} --pull --no-cache ."
                        )
                        customImage.push()
                        customImage.push('latest')
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: '843693ae-3b86-4fd0-9eb9-b375ff07989a',
                                transfers: [
                                    sshTransfer(
                                        execCommand: """
                                        docker pull ${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:latest
                                        docker stop ${DOCKER_IMAGE} || true
                                        docker rm ${DOCKER_IMAGE} || true
                                        docker run -d --name ${DOCKER_IMAGE} -p 3000:3000 ${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:latest
                                        """
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
