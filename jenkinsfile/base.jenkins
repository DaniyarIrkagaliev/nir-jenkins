#!groovy
properties([disableConcurrentBuilds()])

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('Run Tests') {
            steps {
                sh 'npm test'
            }
        }
        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }
        stage('Archive Artifacts') {
            steps {
                sh 'tar -czf build.tar.gz ./dist'
                archiveArtifacts artifacts: 'build.tar.gz', onlyIfSuccessful: true
            }
        }
    stage('Deploy') {
      steps {
          withCredentials([sshUserPrivateKey(
              credentialsId: 'deployment-server-ssh',
              keyFileVariable: 'SSH_KEY',
              usernameVariable: 'SSH_USER'
          )]) {
              sh '''
                  scp -i $SSH_KEY -o StrictHostKeyChecking=no build.tar.gz ${SSH_USER}@server:/var/www/html
                  ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${SSH_USER}@server "
                      tar -xzf /var/www/html/build.tar.gz -C /var/www/html/
                      rm /var/www/html/build.tar.gz
                  "
              '''
            }
        }  
      }
    }
    post {
        always {
            cleanWs()
        }
    }
}
