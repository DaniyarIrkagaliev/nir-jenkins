#!groovy
properties([disableConcurrentBuilds()])

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('Run Tests') {
            steps {
                sh 'npm test'
            }
        }
        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }
        stage('Archive Artifacts') {
            steps {
                sh 'tar -czf build.tar.gz ./dist'
                archiveArtifacts artifacts: 'build.tar.gz', onlyIfSuccessful: true
            }
        }
        stage('Deploy') {
          steps {
              sshPublisher(
                  publishers: [
                      sshPublisherDesc(
                          configName: '843693ae-3b86-4fd0-9eb9-b375ff07989a', 
                          transfers: [
                              sshTransfer(
                                  sourceFiles: 'build.tar.gz', 
                                  removePrefix: '', 
                                  remoteDirectory: '/var/www/my-app', 
                                  execCommand: '''
                                      # Распаковываем архив и удаляем его
                                      tar -xzf /var/www/my-app/build.tar.gz -C /var/www/my-app/
                                      rm /var/www/my-app/build.tar.gz
                                      
                                      sudo systemctl restart nginx || true
                                  '''
                              )
                          ]
                      )
                  ]
              )
          }
      }
    }
    post {
        always {
            cleanWs()
        }
    }
}
