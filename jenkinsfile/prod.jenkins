#!groovy
properties([
    disableConcurrentBuilds()
])

pipeline {
    agent any

    triggers {
        pollSCM('H/5 * * * *')
    }

    options {
        skipStagesAfterUnstable()
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
    }

    environment {
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_HUB_REPO = 'daniyarirkagaliev'
        DOCKER_IMAGE = 'my-app'
        DOCKER_CREDS = credentials('docker-hub-creds')
        DOCKERFILE_PATH = 'docker/Dockerfile'
        SSH_CREDENTIALS_ID = '843693ae-3b86-4fd0-9eb9-b375ff07989a' 
        SERVER_IP = '147.45.184.71' 
        REMOTE_DEPLOY_DIR = '/var/www/html' 
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Dependencies') {
            steps {
                script {
                    def cacheKey = "node-modules-${env.NODE_VERSION}-${sh(script: 'sha1sum package-lock.json | cut -d " " -f1', returnStdout: true).trim()}"

                    if (fileExists('node_modules')) {
                        echo 'Using cached node_modules'
                    } else {
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Code Quality') {
            steps {
                sh 'npm run lint'
                sh 'npm audit'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build -- --incremental'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    if (!fileExists(env.DOCKERFILE_PATH)) {
                        error("Dockerfile not found at path: ${env.DOCKERFILE_PATH}")
                    }

                    docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDS}") {
                        def customImage = docker.build("${DOCKER_HUB_REPO}/${DOCKER_IMAGE}:${env.BUILD_NUMBER}", "-f ${env.DOCKERFILE_PATH} --pull --no-cache .")
                        customImage.push()
                        customImage.push('latest')
                    }
                }
            }
        }

      stage('Deploy to Production') {
          steps {
              script {
                  withCredentials([sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID,
                                                     keyFileVariable: 'SSH_KEY',
                                                     usernameVariable: 'SSH_USER')]) {
                      sh '''
                        ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" <<EOF
                          docker stop my-app || true
                          docker rm my-app || true
                          
                          docker pull ${DOCKER_HUB_REPO}/my-app:latest
                          
                          docker run -d \
                            --name my-app \
                            -p 3000:3000 \
                            --restart unless-stopped \
                            ${DOCKER_HUB_REPO}/my-app:latest
                        
                          docker ps -a --filter "name=my-app-backup-" --format "{{.Names}}" | sort -r | tail -n +2 | xargs -r docker rm -f
                        EOF
                      '''
                  }
              }
          }
      }
    }

    post {
        failure {
            script {
                withCredentials([sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID,
                                                   keyFileVariable: 'SSH_KEY',
                                                   usernameVariable: 'SSH_USER')]) {
                    sh '''
                      ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" "$SSH_USER@$SERVER_IP" <<EOF
                        docker stop my-app || true
                        docker rm my-app || true
                        docker rename $(docker ps -a --filter "name=my-app-backup-" --format "{{.Names}}" | sort -r | head -1) my-app || true
                        docker start my-app
                      EOF
                    '''
                }
            }
        }

        always {
            cleanWs()
            archiveArtifacts artifacts: 'dist/**', onlyIfSuccessful: true
        }
    }
}
